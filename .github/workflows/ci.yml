name: jpo-cvdp
on: 
  push:

jobs:
  jpo-cvdp:
    runs-on: ubuntu-latest
    container:
      image: ubuntu:jammy-20230126
      env:
        REDACTION_PROPERTIES_PATH: "/__w/jpo-cvdp/jpo-cvdp/config/fieldsToRedact.txt"  # This env vairable is used to run ppm test
        BUILD_WRAPPER_OUT_DIR: "$GITHUB_WORKSPACE/bw-output" # This env variable is needed to run SonarSource/sonarcloud-github-c-cpp@v1
      options: "--user root"
    steps:
      - name: checkout code
        uses: actions/checkout@v4 # This action to checkout the code
      - name: Install Deps
        run: |
          apt update
          apt-get -y install sudo wget curl gnupg lsb-release gcovr unzip
          sudo apt-get -y install software-properties-common
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
          sudo add-apt-repository -y "deb [arch=amd64] https://download.docker.com/linux/ubuntu  $(lsb_release -cs)  stable"
          sudo curl -L "https://github.com/docker/compose/releases/download/1.24.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          sudo apt-get -y update
          sudo apt-get -y install docker-ce   
          sudo apt-get install -y libcurl4-openssl-dev
      - name: set up Cmake
        uses: jwlawson/actions-setup-cmake@v2  # this action is used to setup and install Cmake with required versions
        with:
          cmake-version: '3.16'  
      - name: install g++
        run: |
          sudo apt-get -y install build-essential
          sudo apt -y install cmake g++ libprotobuf-dev protobuf-compiler
          sudo apt -y install apt-transport-https ca-certificates curl software-properties-common
          export CXX="g++"          
      - name: install librdkafka # This is to install librdkafka package
        run: |
          git clone --depth 1 https://github.com/confluentinc/librdkafka.git librdkafka
          cd librdkafka
          cmake -H. -B_cmake_build
          cmake --build _cmake_build
          cmake --build _cmake_build --target install  
      - name: Install sonar-scanner and build-wrapper
        uses: sonarsource/sonarcloud-github-c-cpp@v3  # This Action Installs sonar cloud and build wrapper to run sonar scan analysis  
      - name: Build and Generate test coverage
        run: |
          cd $GITHUB_WORKSPACE
          chmod   755  -R /__w/jpo-cvdp/jpo-cvdp
          cat /usr/include/asm-generic/signal.h
          cat /usr/include/x86_64-linux-gnu/asm/signal.h
          export LD_LIBRARY_PATH=/usr/local/lib 
          build-wrapper-linux-x86-64 --out-dir $GITHUB_WORKSPACE/bw-output ./build.sh     
          mkdir coverage
          cd coverage 
          gcov $GITHUB_WORKSPACE/cv-lib/src/*.cpp --object-directory /__w/jpo-cvdp/jpo-cvdp/build/cv-lib/CMakeFiles/CVLib.dir/src/
          gcov $GITHUB_WORKSPACE/src/*.cpp --object-directory /__w/jpo-cvdp/jpo-cvdp/build/CMakeFiles/ppm_tests.dir/src/              
      - name: Archive code coverage results
        uses: actions/upload-artifact@v4 # This action is used to capture the test artifacts and exits if no files are found
        with:
          name: jpo-cvdp-code-coverage
          path: /__w/jpo-cvdp/jpo-cvdp/coverage/
          if-no-files-found: error              
      - name: Archive buildwrapper output
        uses: actions/upload-artifact@v4  # This action is used to capture the builwrapper output files used by sonarscan.
        with: 
          name: jpo-cvdp-buildwrapper-output
          path: /home/runner/work/jpo-cvdp/jpo-cvdp/bw-output       
      - name: Setup SonarScanner
        uses: warchant/setup-sonar-scanner@v7 # This action is used to setup sonar scanner with required versions.
      - name: Generate sonar properties file
        run: |
          cat <<EOF > /tmp/sonar-scanner.properties
          sonar.host.url=https://sonarcloud.io
          sonar.projectName=jpo-cvdp
          sonar.projectVersion=1.0
          sonar.projectKey=usdot-jpo-ode_jpo-cvdp
          sonar.organization=usdot-jpo-ode
          sonar.sources=.
          sonar.exclusions=src/ppm.cpp
          sonar.cfamily.build-wrapper-output=bw-output
          sonar.cfamily.gcov.reportsPath=/__w/jpo-cvdp/jpo-cvdp/coverage/
          sonar.sonar.projectBaseDir=/home/runner/work/jpo-cvdp/jpo-cvdp/
          sonar.exclusions=**/*.java
          sonar.coverage.exclusions=**/*.java
          # Set Git as SCM sensor
          sonar.scm.disabled=true
          #sonar.scm.enabled=false
          sonar.scm.provider=git
          sonar.sourceEncoding=UTF-8
          EOF
      - name: Run SonarScanner
        if: github.event_name == 'pull_request' && github.repository_owner == 'usdot-jpo-ode'
        uses: usdot-fhwa-stol/actions/sonar-scanner@main # This action runs the analysis using generated sonar gcov files and publish reports to respective sonarcloud project.
        with:
          sonar-properties-path: /tmp/sonar-scanner.properties
          sonar-token: ${{ secrets.SONAR_TOKEN }}
          working-dir: $GITHUB_WORKSPACE                   
